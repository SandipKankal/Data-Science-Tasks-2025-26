# -*- coding: utf-8 -*-
"""neuralnetwork_warrantyclaimauthenticity_3109.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lVJg0EMeXcn9i573_ZN1npwoDFw1EBC6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import tensorflow as tf
from tensorflow.keras import layers, models

np.random.seed(42)
data = pd.DataFrame({
    'Region': np.random.choice(['North', 'South', 'East', 'West'], 1000),
    'Product_Category': np.random.choice(['Electronics', 'Furniture', 'Appliances'], 1000),
    'Claim_Value': np.random.randint(1000, 50000, 1000),
    'Claim_Age_Days': np.random.randint(1, 365, 1000),
    'Customer_Type': np.random.choice(['Individual', 'Business'], 1000),
    'Dealer_Type': np.random.choice(['Authorized', 'Unauthorized'], 1000),
    'Num_Prev_Claims': np.random.randint(0, 5, 1000),
    'Warranty_Period_Days': np.random.randint(30, 730, 1000),
    'Authentic': np.random.choice([0, 1], 1000, p=[0.8, 0.2])
})

label_enc = LabelEncoder()
for col in ['Region', 'Product_Category', 'Customer_Type', 'Dealer_Type']:
    data[col] = label_enc.fit_transform(data[col])

X = data.drop('Authentic', axis=1)
y = data['Authentic']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

# 3️⃣ Build Neural Network
nn = models.Sequential([
    layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dropout(0.2),
    layers.Dense(16, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

nn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = nn.fit(X_train, y_train, epochs=20, batch_size=64,
                 validation_data=(X_test, y_test), verbose=1)

loss, acc = nn.evaluate(X_test, y_test)
print(f"Neural Network Accuracy: {acc:.4f}")

plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Validation')
plt.title('Model Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train')
plt.plot(history.history['val_loss'], label='Validation')
plt.title('Model Loss')
plt.legend()
plt.show()

y_pred = (nn.predict(X_test) > 0.5).astype("int32")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - Neural Network")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()