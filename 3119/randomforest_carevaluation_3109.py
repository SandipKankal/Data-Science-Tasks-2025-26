# -*- coding: utf-8 -*-
"""randomforest_carevaluation_3109.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1O92B3NdL23Op5UY7KlD-I7RFSym1OG
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

data = pd.read_csv('/content/drive/MyDrive/SEM VII/DS Defaulters/car_evaluation.csv')  # make sure file name matches
print(" Dataset Loaded Successfully!\n")
print(data.head())

print("\nDataset Info:")
print(data.info())
print("\nMissing Values:\n", data.isnull().sum())
print("\nUnique values per column:\n", data.nunique())

target_column = data.columns[-1]
print(f"\n Target column detected: '{target_column}'")

le = LabelEncoder()
for col in data.columns:
    if data[col].dtype == 'object':
        data[col] = le.fit_transform(data[col])

print("\n All categorical columns encoded!")

X = data.drop(target_column, axis=1)
y = data[target_column]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("\n Data split into training and testing sets!")

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

print("\n Random Forest Results:")
print("Accuracy:", round(accuracy_score(y_test, y_pred_rf)*100, 2), "%")
print("Classification Report:\n", classification_report(y_test, y_pred_rf))

svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

print("\n SVM Results:")
print("Accuracy:", round(accuracy_score(y_test, y_pred_svm)*100, 2), "%")
print("Classification Report:\n", classification_report(y_test, y_pred_svm))

models = ['Random Forest', 'SVM']
accuracy = [accuracy_score(y_test, y_pred_rf), accuracy_score(y_test, y_pred_svm)]

sns.barplot(x=models, y=accuracy, palette='crest')
plt.title("Model Accuracy Comparison â€“ Car Evaluation")
plt.ylabel("Accuracy")
plt.ylim(0, 1)
plt.show()