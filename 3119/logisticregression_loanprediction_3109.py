# -*- coding: utf-8 -*-
"""logisticregression_loanprediction_3109.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AGycp_S_fZsTftKuzVru_oP19kuI0IXf
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('Loan_Prediction.csv')
print("✅ Dataset Loaded Successfully!\n")
print(data.head())

print("\nMissing Values:\n", data.isnull().sum())

# Fill missing values
data.fillna(data.mean(numeric_only=True), inplace=True)
data.fillna(data.mode().iloc[0], inplace=True)

print("\n✅ Missing values handled successfully!")

le = LabelEncoder()
for col in data.columns:
    if data[col].dtype == 'object':
        data[col] = le.fit_transform(data[col])

print("\n✅ Categorical columns encoded!")

X = data.drop('Loan_Status', axis=1)
y = data['Loan_Status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("\n✅ Data split into training and testing sets!")

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

print("\n Logistic Regression Results:")
print("Accuracy:", accuracy_score(y_test, y_pred_lr))
print("Classification Report:\n", classification_report(y_test, y_pred_lr))

dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)

print("\n Decision Tree Results:")
print("Accuracy:", accuracy_score(y_test, y_pred_dt))
print("Classification Report:\n", classification_report(y_test, y_pred_dt))

models = ['Logistic Regression', 'Decision Tree']
accuracy = [accuracy_score(y_test, y_pred_lr), accuracy_score(y_test, y_pred_dt)]

sns.barplot(x=models, y=accuracy, palette='viridis')
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.ylim(0, 1)
plt.show()

best_model = 'Decision Tree' if accuracy[1] > accuracy[0] else 'Logistic Regression'
print(f"\n Best Performing Model: {best_model}")

if best_model == 'Decision Tree':
    cm = confusion_matrix(y_test, y_pred_dt)
else:
    cm = confusion_matrix(y_test, y_pred_lr)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title(f"{best_model} – Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()