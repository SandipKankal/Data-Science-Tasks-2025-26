# -*- coding: utf-8 -*-
"""D Defaulter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NnSF7tWB3DEZguPlXCTv5orCQ_JDP6dF
"""

# --- 1) Install required packages if needed ---
# pip install pandas numpy scikit-learn xgboost imbalanced-learn matplotlib seaborn requests joblib

import pandas as pd
import numpy as np
import os
import requests
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score, accuracy_score, confusion_matrix, classification_report, roc_curve
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# --- 2) Download dataset ---------------------------------------------------
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/ionosphere.csv"  # Sample dataset
filename = "osteoporosis_dataset.csv"

if not os.path.exists(filename):
    print("Downloading dataset...")
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(response.text)
        print(f"Dataset downloaded and saved as {filename}")
    else:
        raise Exception("Failed to download dataset")

# --- 3) Load dataset -------------------------------------------------------
df = pd.read_csv(filename, header=None)  # no headers in this sample dataset
print("Dataset loaded. Shape:", df.shape)

# --- 4) Preprocess target --------------------------------------------------
# Assume last column is target
df.rename(columns={df.columns[-1]: 'osteoporosis'}, inplace=True)
y = df['osteoporosis']
X = df.drop(columns=['osteoporosis'])

# Map target to numeric 0/1
target_mapping = {label: i for i, label in enumerate(y.unique())}  # e.g., {'b':0, 'g':1}
y = y.map(target_mapping)
print("Target mapping:", target_mapping)

if y.isna().any():
    raise ValueError("Target column contains NaN after mapping!")

# --- 5) Train/test split and handle imbalance ------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

# --- 6) Train Random Forest ------------------------------------------------
numeric_features = X.columns.tolist()
numeric_transformer = Pipeline(steps=[('scaler', StandardScaler())])

rf_clf = Pipeline(steps=[('scaler', numeric_transformer),
                         ('classifier', RandomForestClassifier(n_estimators=500, random_state=42))])

rf_clf.fit(X_train_res, y_train_res)

# --- 7) Predict and evaluate -----------------------------------------------
y_pred = rf_clf.predict(X_test)
y_pred_proba = rf_clf.predict_proba(X_test)[:,1]

auc = roc_auc_score(y_test, y_pred_proba)
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

print(f"\nAccuracy: {acc:.3f}")
print(f"AUC: {auc:.3f}")
print("Confusion Matrix:\n", cm)
print("Classification Report:\n", classification_report(y_test, y_pred))

# --- 8) Plot ROC curve -----------------------------------------------------
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label=f'Random Forest (AUC = {auc:.3f})')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

# --- 9) Feature importance -------------------------------------------------
rf_features = rf_clf.named_steps['classifier'].feature_importances_
feat_importance = pd.DataFrame({'feature': numeric_features, 'importance': rf_features}).sort_values(by='importance', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x='importance', y='feature', data=feat_importance.head(20))
plt.title("Top 20 Feature Importances - Random Forest")
plt.show()

# --- 10) Save model --------------------------------------------------------
joblib.dump(rf_clf, 'osteoporosis_rf_model.pkl')
print("Model saved as osteoporosis_rf_model.pkl")

# --- 11) Predict on new patients -------------------------------------------
new_patients = X_test.head()
pred_probs = rf_clf.predict_proba(new_patients)[:,1]
pred_classes = rf_clf.predict(new_patients)
print("\nPredictions for first 5 test patients:")
for i, prob in enumerate(pred_probs):
    print(f"Patient {i+1}: Predicted risk probability={prob:.3f}, Class={pred_classes[i]}")